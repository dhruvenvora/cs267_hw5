<?php
namespace HW5_Group\Hw5_composer;
/*
This class defines the methods used for calculating document ranks based on
proximity ranking scheme.
*/
class ProximityRank
{
    // $ind caches the last referred position of the word in a document.
    private static $ind = array();
    private static $currDoc = 0;
    private static $cover;
    
    //beggining of previous cover. Initially 0.
    //private static currPos;
    
    /*
    This constructor initializes following variables
    $ind = index to keep track of searched position of word
    */
    function __construct($totalWords) 
    {
        for ($i=0;$i<$totalWords;$i++) {
            $this::$ind[$i] = 0; // start with the 0th index(not position)
        }
    }
    
    /*
    This function calculates the rank of the documents based on the proximity 
    of the query words in the document.
    $word_map = Complete inverted index.
    $words = map of words to be searched.
    $k = top K documents with highest ranking are returned.
    $docs = list of common document id's.
    */
    function rankProximity(&$word_map, &$words, $k, &$docs)
    {
        $rankedDocs = array();
                
        for ($i=0;$i<count($docs);$i++) {
            $currPos = 0;
            $reachedEnd = false;
            $currDoc = $docs[$i];
            $this::$cover = array();
            for ($t=0;$t<count($words);$t++) {
                $this::$ind[$t] = 0; // start with the 0th index(not position)
            }
            while ($reachedEnd == false) {
                $reachedEnd = $this->nextCover($word_map, $words, 
                                                $currDoc, $currPos);
            }
            $rankedDocs[$currDoc] = $this->score();
        }
        return $rankedDocs;
    }
    
    /*
    This function will return the next cover i.e. [u, v] pair for a given query.
    $word_map = original inverted index
    $words = list of keywords from the query.
    $docid = current document being searched.
    $currPos = 'u' value found from previous nextCover method. Initially pass 0.
    */
    function nextCover(&$word_map, $words, $docid, &$currPos)
    {
        $len = count($words);
        $v = 0;//this will store max position of query word in file.
        for ($i=0;$i<$len;$i++) {
            //Get a posting list for word in a document.
            $word_arr = $word_map[$words[$i]][$docid];
            $pos = $this->next($word_arr, $i, $currPos);     
            
            if ($pos == -1) {
                return true;//No more covers are there.    
            }
            if ($pos > $v) {
                $v = $pos;
            }    
        }
        
        $endOfCover = $v+1;
        $u = $v+1;
        
        for($i=0;$i<$len;$i++){
            //Get a posting list for word in a document.
            $word_arr = $word_map[$words[$i]][$docid];
            
            $pos = $this->prev($word_arr, $i, $endOfCover);
            if ($pos == -1) {
                return true;
            }    
            if ($pos < $u) {
                $u = $pos;
            }    
        }
        
        $len = count($this::$cover);
        
        if ($len > 1 && ($this::$cover[$len-1] == $u 
                     || $this::$cover[$len-2] == $v)) {
            return true;
        }    
            
        array_push($this::$cover, $v);
        array_push($this::$cover, $u);
        $currPos = $u;
        return false;
    }

    /*
    This function will return next position of the word after current position
    If the position is not > $currPos then return -1.
    TODO: Galloping search
    $word_arr = posting list of positions in a document for a word.
    $p = index of the word in keyword list
    $currPos = 'u' from previous cover. Initially 0.
    */
    function next(&$word_arr, $p, $currPos)
    {
        $len = count($word_arr);
        //start looking from current referred index of word.
        $i = $this->galloping_search_next($word_arr, $p, $currPos);
        /*for($i=$this::$ind[$p]; $i<$len; $i++) {
            if($word_arr[$i] > $currPos) {
                break;
            }
        }*/
        if ($i == -1) {
            return -1;
        } else {
            $this::$ind[$p] = $i;
            return $word_arr[$i];//actual position of the word in file.
        }
    }

    /*
    This function will return prev position of the word after current position
    If the position is not > $currPos then return -1.
    TODO: Galloping search
    $word_arr = posting list of positions in a document for a word.
    $p = index of the word in keyword list
    $nextOfCover = 'v+1' of current cover.
    */
    function prev(&$word_arr, $p, $nextOfCover){
        $len = count($word_arr);
        
        $i = $this->galloping_search_prev($word_arr, $p, $nextOfCover);
        /*for($i=$this::$ind[$p]; $i<$len; $i++) {
            if($word_arr[$i] >= $nextOfCover) {
                break;
            }
        }
        if($i == $len)
            return -1;*/
        //$i--;//Found position just before current position
        if ($i < 0) {
            return -1;
        } else {
            $this::$ind[$p] = $i;
            return $word_arr[$i];
        }
    }
    
    function galloping_search_next(&$word_arr, $p, $currPos)
    {
        $len = count($word_arr);
        $jump = 1;
        $i = $this::$ind[$p];
        $less = $i;
        while ($i < $len) {
            if ($word_arr[$i] > $currPos) {
                break;
            } else {
                $less = $i;
                $i += $jump;
                $jump *= 2;
            }
        }

        if ($i >= $len) {
            $i = $len-1;
            //This condition ensures that we stop search if our current position
            //is greater than word occurance.
            if ($word_arr[$i] < $currPos) {
                return -1;
            }    
        }

        return $this->binarySearch($word_arr, $currPos, $less, $i);
    }
    
    function galloping_search_prev(&$word_arr, $p, $currPos)
    {
        $len = count($word_arr);
        $jump = 1;
        $i = $this::$ind[$p];
        $less = $i;
        while ($i < $len) {
            if ($word_arr[$i] > $currPos) {
                break;
            } else {
                $less = $i;
                $i += $jump;
                $jump *= 2;
            }
        }

        if ($i >= $len) {
            $i = $len-1;
            if ($word_arr[$i] < $currPos) {
                return $i;
            }    
        }

        return ($this->binarySearch($word_arr, $currPos, $less, $i) - 1);
    }
    
    function binarySearch($word_arr, $currPos, $first, $last)
    {
        $i = (int)(($first + $last) / 2);
        while ($first < $last) {
            if ($word_arr[$i]>$currPos) {
                $last = $i-1;
            } else {
                $first = $i+1;
            }
        }
        if ($first >= count($word_arr)) {
            return -1;
        } else {
            return $first;
        }    
    }

    function score()
    {
        $score = 0.0;
        $count = count($this::$cover);
        for ($i=0;$i<$count;$i=$i+2) {
            $score += 1.0/($this::$cover[$i]-$this::$cover[$i+1]+1);
        }
        return $score;
    }
}
